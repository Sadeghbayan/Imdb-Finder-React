{"version":3,"sources":["components/SearchFrom.js","components/SearchResult.js","App.js","components/SingleMovie.js","components/Error.js","components/Router.js","serviceWorker.js","index.js"],"names":["SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Form","inline","onSubmit","queryHanlder","FormGroup","controlId","FormControl","name","className","type","placeholder","Button","Component","SearchResult","Col","xs","md","Link","to","pathname","concat","dataResult","imdbID","movieId","style","backgroundImage","Poster","Type","Year","Title","App","query","results","handleSearch","e","target","elements","value","self","assertThisInitialized","axios","get","then","response","data","Error","setState","Search","localStorage","setItem","JSON","stringify","catch","error","console","log","preventDefault","json","getItem","parse","SearchFrom","Grid","Row","length","map","result","i","components_SearchResult","key","SingleMovie","movie","id","location","match","params","classID","src","alt","Runtime","Genre","Plot","Writer","Director","Actors","Router","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","hostname","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea8181ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, FormControl, FormGroup, Button } from 'react-bootstrap'\n\nclass SearchForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Form inline onSubmit={this.props.queryHanlder}>\n                    <FormGroup controlId=\"formInlineName\">\n                        <FormControl name=\"query\" className=\"searchBox\" type=\"text\" placeholder=\"Interstellar, Dark Knight, TinTin, ...\" />\n                    </FormGroup>\n                    {' '}\n                    <Button className=\"search_btn\" type=\"submit\">Search</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n//\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport {Col} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nclass SearchResult extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ''\n    }\n    render() {\n        return (\n            <Col xs={6} md={3} className=\"item\">\n                <Link to={{\n                    pathname:`/movie/${this.props.dataResult.imdbID}`,\n                    state:{movieId:this.props.dataResult.imdbID}\n                    }} className=\"card\" style ={{backgroundImage: `url(${this.props.dataResult.Poster})`}}>\n                    <span className=\"dg-overlay-dark\"></span>\n                    <span className=\"card__body\">\n                        <span className=\"card__type\">\n                                {this.props.dataResult.Type} \n                                {' / '}\n                                {this.props.dataResult.Year}\n                        </span>\n                        <span className=\"card__title\">\n                            <h4>\n                            {this.props.dataResult.Title}\n                            </h4>\n                        </span>\n                    </span>\n                </Link>\n            </Col>\n        );\n    }\n}\n\nexport default SearchResult;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Jumbotron, Grid, Row, Col } from 'react-bootstrap';\nimport SearchForm from './components/SearchFrom';\nimport SearchResult from './components/SearchResult';\n\nclass App extends Component {\n  state = {\n    query: '',\n    results: []\n  }\n  componentDidMount() {\n    var json = localStorage.getItem('movies');\n    const results = JSON.parse(json);\n    this.setState({\n      results\n    })\n  }\n\n  handleSearch = (e) => {\n    var query = e.target.elements.query.value;\n    var self = this;\n    axios.get(\"http://www.omdbapi.com/?s=\" + query + \"&page=1&apikey=66ff68e5\")\n      .then(function (response) {\n        if (response.data.Error) {\n          return false;\n        } else {\n          self.setState({\n            results: response.data.Search\n          });\n          localStorage.setItem('movies', JSON.stringify(response.data.Search))\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    e.preventDefault();\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"header text-center\">\n          <h2 className=\"title\">Find Your Favorite Movies</h2>\n          <SearchForm queryHanlder={this.handleSearch} />\n        </div>\n        <div className=\"content\">\n          <Grid>\n            <Row className=\"show-grid\">\n              {\n                this.state.results && this.state.results.length !== 0 && this.state.results.map(function (result, i) {\n                  return <SearchResult dataResult={result} key={i} />\n                })\n              }\n              {\n                this.state.results && this.state.results.length === 0 ? (\n                  <div className=\"list--empty text-center d-block\">\n                    <p>Awww! We don't have the Movie you are looking for.</p>\n                  </div>\n                ) : false\n              }\n            </Row>\n\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Grid } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass SingleMovie extends Component {\n    state = {\n        movie: {}\n    }\n    componentDidMount() {\n        var id = '';\n        if(this.props.location.state){\n            id = this.props.location.state.movieId;\n        }else{\n            id = this.props.match.params.id;\n        }\n        console.log(id)\n        var self = this;\n        axios.get(\"http://www.omdbapi.com/?i=\" + id + \"&page=1&apikey=66ff68e5\")\n            .then(function (response) {\n                var movie = response.data\n                self.setState({\n                    movie\n                })\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    render() {\n        var movie = this.state.movie;\n        return (\n            <div className=\"movie__wrapper\" style={{backgroundImage : `linear-gradient(rgba(30, 27, 38, 0.9), rgba(30, 27, 38, 0.9)),url(${movie.Poster})`}}>\n                <Grid>\n                    <div className=\"movie\" classID=\"movie-card\">\n                        <div className=\"movie__data\" classID=\"movie-data\">\n                            <div className=\"movie__poster\">\n                                <span className=\"movie__poster--fill\">\n                                    <img src={ movie.Poster } alt={movie.Title}/>\n                                </span>\n                                <span className=\"movie__poster--featured\">\n                                    <img src={ movie.Poster } alt={movie.Title}/>\n                                </span>\n                            </div>\n                            <div className=\"movie__details\">\n                                <h2 className=\"movie__title\">{ movie.Title }</h2>\n                                <ul className=\"movie__tags list--inline\">\n                                    <li className=\"movie__rated\">{movie.Runtime}</li>\n                                    <li className=\"movie__year\">{movie.Year}</li>\n                                    <li className=\"movie__year\">{movie.Genre}</li>\n                                    <li className=\"movie__year\">{movie.Type}</li>\n                                </ul>\n                                <p className=\"movie__plot\">{movie.Plot}</p>\n                                <div className=\"movie__credits\">\n                                    <p><strong>Written by:</strong> {movie.Writer}</p>\n                                    <p><strong>Directed by:</strong> {movie.Director}</p>\n                                    <p><strong>Starring:</strong></p>\n                                    <ul className=\"movie__actors list--inline\">\n                                    <li>{movie.Actors}</li>\n                                    </ul>\n                                    <button className=\"movie__button\">\n                                        <Link to=\"/\">Go Home</Link>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default SingleMovie;\n\n","import React, {Component} from 'react';\nclass Error extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div className=\"error\">\n                Not Found\n            </div>\n         );\n    }\n}\n \nexport default Error;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport App from '../App'\nimport SingleMovie from './SingleMovie'\nimport Error from './Error'\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" component={App} exact />\n            <Route path=\"/movie/:id\" component={SingleMovie}/>\n            // <Route component={Error} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from \"./components/Router\";\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}